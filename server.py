# -*- coding: utf-8 -*-
"""server.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tMkoJulAvCJRmoLyf22IBCgOBNUgpXka
"""

# ==================== IMPORTS ====================
from flask import Flask, request, jsonify, render_template
import numpy as np
import librosa
import tensorflow as tf
from tensorflow.keras.preprocessing.image import img_to_array, load_img
import os
from werkzeug.utils import secure_filename
from PIL import Image

# ==================== GOOGLE DRIVE MOUNT (ONLY IN COLAB) ====================
try:
    from google.colab import drive
    drive.mount('/content/drive')
    print("Drive mounted successfully.")
except ImportError:
    print("Google Colab not detected. Running locally.")

# ==================== PATHS ====================
BASE_DIR = '/content/drive/MyDrive/AutismDetectionProject'
MODEL_DIR = os.path.join(BASE_DIR, 'model')
UPLOAD_FOLDER = os.path.join(BASE_DIR, 'uploads')
TEMPLATE_FOLDER = os.path.join(BASE_DIR, 'webapp', 'templates')

# ==================== APP SETUP ====================
app = Flask(__name__, template_folder=TEMPLATE_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# ==================== MODEL LOADING ====================
image_model = tf.keras.models.load_model(os.path.join(MODEL_DIR, 'asd_image_model.keras'))
audio_model = tf.keras.models.load_model(os.path.join(MODEL_DIR, 'asd_audio_model.keras'))

# ==================== AUDIO LOADING FUNCTION ====================
def load_audio(audio_path, max_length=100):
    y, sr = librosa.load(audio_path, sr=16000)
    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40)
    mfcc = mfcc.T
    if mfcc.shape[0] > max_length:
        mfcc = mfcc[:max_length, :]
    else:
        pad_width = max_length - mfcc.shape[0]
        mfcc = np.pad(mfcc, ((0, pad_width), (0, 0)), mode='constant')
    return mfcc

# ==================== ROUTES ====================
@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    try:
        # Process image
        image_file = request.files['image']
        image_path = os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(image_file.filename))
        image_file.save(image_path)

        img = load_img(image_path, target_size=(128, 128))
        img_array = img_to_array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)

        image_pred = image_model.predict(img_array)[0][0]
        image_label = "Autism Detected" if image_pred > 0.5 else "No Autism"

        # Process audio
        audio_file = request.files['audio']
        audio_path = os.path.join(app.config['UPLOAD_FOLDER'], secure_filename(audio_file.filename))
        audio_file.save(audio_path)

        audio_data = np.expand_dims(load_audio(audio_path), axis=0)
        audio_pred = audio_model.predict(audio_data)[0][0]
        audio_label = "Autism Detected" if audio_pred > 0.5 else "No Autism"

        final_result = f"Image: {image_label} ({image_pred * 100:.2f}%) | Audio: {audio_label} ({audio_pred * 100:.2f}%)"

        return jsonify({'prediction': final_result})

    except Exception as e:
        print(e)
        return jsonify({'error': 'Prediction failed!'})

# ==================== MAIN ====================
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)

import os

# Check if the file really exists
os.path.exists('/content/drive/MyDrive/AutismDetectionProject/webapp/templates/index.html')

!pip install flask-ngrok

!pip install pyngrok